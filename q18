//Write a C /Python to implement CRC.
def xor(a, b):
    result = []
    for i in range(1, len(b)):
        if a[i] == b[i]:
            result.append('0')
        else:
            result.append('1')
    return ''.join(result)

def mod2div(dividend, divisor):
    pick = len(divisor)
    tmp = dividend[0:pick]
    while pick < len(dividend):
        if tmp[0] == '1':
            tmp = xor(divisor, tmp) + dividend[pick]
        else:
            tmp = xor('0'*pick, tmp) + dividend[pick]
        pick += 1
    
    if tmp[0] == '1':
        tmp = xor(divisor, tmp)
    else:
        tmp = xor('0'*pick, tmp)
    return tmp

def encode_data(data, key):
    l_key = len(key)
    appended_data = data + '0'*(l_key-1)
    remainder = mod2div(appended_data, key)
    return data + remainder

def verify_data(data, key):
    remainder = mod2div(data, key)
    return int(remainder) == 0

# Example usage
data = '1101011011'  # Binary input data
key = '10011'       # Polynomial key

print(f"Input Data: {data}")
print(f"Polynomial Key: {key}")

encoded_data = encode_data(data, key)
print(f"Encoded Data with CRC: {encoded_data}")

is_valid = verify_data(encoded_data, key)
print(f"Is the encoded data valid? {'Yes' if is_valid else 'No'}")
